(ql:quickload :numcl)
(ql:quickload :nodgui)

(defun get-acc (pos mass gravitational-constant softening)
  (let*
      ((x (numcl:aref pos t '(0 1)))
       (y (numcl:aref pos t '(1 2)))
       (z (numcl:aref pos t '(2 3)))
       (dx (numcl:- (numcl:transpose x) x))
       (dy (numcl:- (numcl:transpose y) y))
       (dz (numcl:- (numcl:transpose z) z))
       ; inv_r3 = (dx**2 + dy**2 + dz**2 + softening**2)
       (inv-r3-tmp (numcl:asarray (numcl:+       
           (numcl:expt dx 2) (numcl:expt dy 2) (numcl:expt dz 2) (numcl:expt softening 2))))
       ; inv_r3[inv_r3>0] = inv_r3[inv_r3>0]**(-1.5)
       (inv-r3 (numcl:expt inv-r3-tmp -1.5))
       ; ax = G * (dx * inv_r3) @ mass
       (dx-tmp (numcl:asarray (numcl:* dx inv-r3)))
       (dy-tmp (numcl:asarray (numcl:* dy inv-r3)))
       (dz-tmp (numcl:asarray (numcl:* dz inv-r3)))
       (ax (numcl:* gravitational-constant (numcl:matmul dx-tmp mass)))
       (ay (numcl:* gravitational-constant (numcl:matmul dy-tmp mass)))
       (az (numcl:* gravitational-constant (numcl:matmul dz-tmp mass))))
    (numcl:concatenate (list ax ay az) :axis 1)))

(defun get-energy (pos vel mass gravitational-constant)
  ;KE = 0.5 * np.sum(np.sum( mass * vel**2 ))
  (let* ((kinetic-energy (* 0.5 (numcl:sum (numcl:* mass (numcl:expt vel 2)))))
         (x (numcl:aref pos t '(0 1)))
         (y (numcl:aref pos t '(1 2)))
         (z (numcl:aref pos t '(2 3)))
         (dx (numcl:- (numcl:transpose x) x))
         (dy (numcl:- (numcl:transpose y) y))
         (dz (numcl:- (numcl:transpose z) z))
         (inv-r-tmp (numcl:asarray 
                     (numcl:+ 
                      (numcl:expt dx 2) (numcl:expt dy 2) (numcl:expt dz 2))))
         ; inv_r3[inv_r3>0] = inv_r3[inv_r3>0]**(-1.5)
         (inv-r-tmp (numcl:expt inv-r-tmp 0.5))
         ; (inv-r (numcl:/ 1.0 inv-r-tmp))
         (idx-above-zero (numcl:where (numcl:triu inv-r-tmp 1) (lambda (x) (> x 0))))
         (inv-r (numcl:/ 1.0 (numcl:asarray (numcl:take inv-r-tmp idx-above-zero))))
         (mass-itxn (numcl:asarray (numcl:take (numcl:* mass (numcl:transpose mass)) idx-above-zero)))
         (potential-energy (* gravitational-constant (numcl:sum (numcl:* (numcl:- mass-itxn) inv-r)))))
    (list kinetic-energy potential-energy)))


(defun main ()
  "n-body simulatrion"
  (nodgui:with-nodgui ()
    (nodgui:wm-title nodgui:*tk* "n-body Simulation")
    (let* ((particle-count 50)
           (current-time 0)  
           (end-time 50.00)
           (time-step 0.01)
           (softening 0.1)
           (gravitational-constant 1.0)
           (canvas (make-instance 'nodgui:canvas :width 1000 :height 800 :background :white))
           (add-oval #'(lambda (x y w c)
                         (nodgui:configure (nodgui:make-oval canvas x y (+ x w) (+ y w))        ; 2
                                    :fill c
                                    :width 0
                                    :tag "currentparticle")))
           (particle-masses (numcl:ones (list particle-count 1) :type 'double-float))

           (mass (numcl:/ (numcl:* 20 particle-masses) particle-count))

           (pos (numcl:normal 0d0 1d0 (list particle-count 3)))
           (vel (numcl:normal 0d0 1d0 (list particle-count 3)))
           (center-of-mass 
                 (numcl:/ (numcl:mean (numcl:* mass vel) :axes 0) (numcl:mean mass)))
           ;(setf vel-converted (numcl:- vel center-of-mass))
           (vel (numcl:- vel center-of-mass))
           (acc (get-acc pos mass gravitational-constant softening))
           ;(format t "acc: ~a~%" acc)
           (energies (get-energy pos vel mass gravitational-constant))
           ;(format t "energies: ~a~%" energies)
           ;(setf number-of-steps (ceiling (/ end-time time-step)))
           (number-of-steps (ceiling (/ end-time time-step)))
           (saved-positions (numcl:zeros (list particle-count 3 (+ number-of-steps 1)) :type 'double-float))           
           ;KE_save = np.zeros(Nt+1)
           ;KE_save[0] = KE
           ;PE_save = np.zeros(Nt+1)
           ;PE_save[0] = PE
           ;t_all = np.arange(Nt+1)*dt
           (saved-kinetic-energies (numcl:zeros (+ number-of-steps 1)  :type 'double-float)) 
           (saved-potential-energies (numcl:zeros (+ number-of-steps 1) :type 'double-float)))
      (setf (numcl:aref saved-positions '(0 100) '(0 3) 0) pos)
      (setf (numcl:aref saved-kinetic-energies 0) (first energies))
      (setf (numcl:aref saved-potential-energies 0) (second energies))
      (nodgui:grid canvas 0 0 :sticky "news")
      (nodgui:grid-columnconfigure nodgui:*tk* 0 :weight 1)
      (nodgui:grid-rowconfigure nodgui:*tk* 0 :weight 1)
      (dotimes (i number-of-steps)
        (nodgui:clear canvas)
        (dotimes (j particle-count)
	  (let (
             (x-pos (numcl:aref pos j 0))
             (y-pos (numcl:aref pos j 1))
             (xs (numcl:aref saved-positions t '(0 1) (list (max (- i 30) 0) (+ i 1))))
             (ys (numcl:aref saved-positions t '(1 2) (list (max (- i 30) 0) (+ i 1)))))
             (loop for a across (numcl:aref xs j 0)
                for b across (numcl:aref ys j 0)
                ; do (format t "~a~%~a~%~a~%~a~%~%" xs ys a b)
                do (funcall add-oval (+ 500 (* a 100)) (+ 400 (* b 100)) 5 :gray75))
          ; (format t "~a~%~a~%~%~%" x-pos y-pos)
             (funcall add-oval (+ 500 (* x-pos 100)) (+ 400 (* y-pos 100)) 7 :blue)))
        (setf vel (numcl:+ vel (numcl:* acc (numcl:/ time-step 2.0))))
        (setf pos (numcl:+ pos (numcl:* vel time-step)))
        (setf acc (get-acc pos mass gravitational-constant softening))
        (setf current-time (+ current-time time-step))
        (setf energies (get-energy pos vel mass gravitational-constant))
        (setf (numcl:aref saved-positions '(0 100) '(0 3) (+ i 1)) pos)
        (setf (numcl:aref saved-kinetic-energies (1+ i)) (first energies))
        (setf (numcl:aref saved-potential-energies (1+ i)) (second energies))
        (format t "~a, Energies: KE:~,vf PE:~,vf KE+PE:~,vf~%" i 3 (first energies) 3 (second energies) 3 (apply '+ energies))
        ; (format t "~a~%~a~%~a~%~a~%~%" vel pos acc energies)
        ; (format t "~a~%~%~%" saved-positions)
        ))))

(main)
